#!/usr/bin/env node

import http from 'node:http';
import app from '../app.js';

/* Last resort error handler, that should never happen but somehow it sometimes does.
   We quit because in a case of OOM/DOS, a restart may just be the best solution.
   See: https://github.com/r-universe-org/help/issues/310 */
process.on('uncaughtException', function(err) {
  console.log( "[UNCAUGHT EXCEPTION] " + err.stack || err.message );
  process.exit(1);
});

var port = parseInt(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * This must be greater than the nginx timeout (60s)
 * https://shuheikagawa.com/blog/2019/04/25/keep-alive-timeout/
 */
server.keepAliveTimeout = 62*1000;
server.headersTimeout = 65*1000;

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
